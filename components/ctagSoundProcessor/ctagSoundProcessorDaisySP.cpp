#include "ctagSoundProcessorDaisySP.hpp"

using namespace CTAG::SP;

void ctagSoundProcessorDaisySP::Process(const ProcessData &data) {

    MK_FLT_PAR_ABS(fTest, test, 4095.f, 1.f)
    MK_BOOL_PAR(bTrig, trigger)

    if(bTrig){
        bd.Trig();
    }

    bd.SetDecay(0.25f);
    bd.SetAccent(0.5f);
    bd.SetAttackFmAmount(0.25f);
    bd.SetFreq(50.f);
    bd.SetSustain(false);
    bd.SetTone(fTest);

    for(int i=0;i<bufSz;i++){
        data.buf[i*2 + processCh] = bd.Process();
    }

}

ctagSoundProcessorDaisySP::ctagSoundProcessorDaisySP() {
    // construct internal data model
    knowYourself();
    model = std::make_unique<ctagSPDataModel>(id, isStereo);
    LoadPreset(0);

    bd.Init(44100.f);
}

ctagSoundProcessorDaisySP::~ctagSoundProcessorDaisySP() {
}

void ctagSoundProcessorDaisySP::knowYourself(){
    // autogenerated code here
    // sectionCpp0
	pMapPar.emplace("test", [&](const int val){ test = val;});
	pMapCv.emplace("test", [&](const int val){ cv_test = val;});
	pMapPar.emplace("trigger", [&](const int val){ trigger = val;});
	pMapTrig.emplace("trigger", [&](const int val){ trig_trigger = val;});
	isStereo = false;
	id = "DaisySP";
	// sectionCpp0
}